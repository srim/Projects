#define TEST_DIR getenv("PWD")#define SYSTEM_FILE TEST_DIR+"/CNI_Burst1_UNLV_test.mxp"#define NAME_EXPERIMENT "CNI_Burst1_UNLV_test"// stimuli configuration#define SYSTEM_CLOCK 1000 	// (ps) (1000 Mhz) simulation clock (required for throughput calculation)#define RUNTIME 20000#define WARMUP 1#define COUNT_MASTER 0#define DO_WRITES 1#define DO_READS 0#define TRANSACTION_PAUSE 1#define BUFFER_SIZE "0x200000"#include "./include/caxitg_macros.h"#include "constants.h"#define MASTER_CLOCK "1000"  			// CPU#define BYTE_SIZE_MASTER 8				// number of bytes(64bit data width)#define BYTE_SIZE_SLAVE 8				// number of bytes(64bit data width)#define SLAVE_CLOCK "1000" 				// DDR#define BUF_BASE_ADDRESS "0x00000000" 	// DDR#define MASTER_1 "CPU_1"#define MASTER_2 "CPU_2"#define MASTER_3 "CPU_3"#define MASTER_4 "CPU_4"#define MASTER_5 "CPU_5"#define MASTER_6 "CPU_6"#define MASTER_7 "CPU_7"#define MASTER_8 "CPU_8"#define MASTER_9 "CPU_9"#define MASTER_10 "CPU_10"#define MASTER_11 "CPU_11"#define MASTER_12 "CPU_12"#define MASTER_13 "CPU_13"#define MASTER_14 "CPU_14"#define MASTER_15 "CPU_15"#define MASTER_16 "CPU_16"#define SLAVE_1 "DDR_1"#define SLAVE_2 "DDR_2"#define SLAVE_3 "DDR_3"#define SLAVE_4 "DDR_4"#define SLAVE_5 "DDR_5"#define SLAVE_6 "DDR_6"#define SLAVE_7 "DDR_7"#define SLAVE_8 "DDR_8"#define SLAVE_9 "DDR_9"#define SLAVE_10 "DDR_10"#define SLAVE_11 "DDR_11"#define SLAVE_12 "DDR_12"#define SLAVE_13 "DDR_13"#define SLAVE_14 "DDR_14"#define SLAVE_15 "DDR_15"#define SLAVE_16 "DDR_16"#define CONTROL_SCRIPT_1  TEST_DIR+"/mxscript/Stub_scripts/stub_1.mxscr"#define CONTROL_SCRIPT_2  TEST_DIR+"/mxscript/Stub_scripts/stub_2.mxscr"#define CONTROL_SCRIPT_3  TEST_DIR+"/mxscript/Stub_scripts/stub_3.mxscr"#define CONTROL_SCRIPT_4  TEST_DIR+"/mxscript/Stub_scripts/stub_4.mxscr"#define CONTROL_SCRIPT_5  TEST_DIR+"/mxscript/Stub_scripts/stub_5.mxscr"#define CONTROL_SCRIPT_6  TEST_DIR+"/mxscript/Stub_scripts/stub_6.mxscr"#define CONTROL_SCRIPT_7  TEST_DIR+"/mxscript/Stub_scripts/stub_7.mxscr"#define CONTROL_SCRIPT_8  TEST_DIR+"/mxscript/Stub_scripts/stub_8.mxscr"#define CONTROL_SCRIPT_9  TEST_DIR+"/mxscript/Stub_scripts/stub_9.mxscr"#define CONTROL_SCRIPT_10 TEST_DIR+"/mxscript/Stub_scripts/stub_10.mxscr"#define CONTROL_SCRIPT_11 TEST_DIR+"/mxscript/Stub_scripts/stub_11.mxscr"#define CONTROL_SCRIPT_12 TEST_DIR+"/mxscript/Stub_scripts/stub_12.mxscr"#define CONTROL_SCRIPT_13 TEST_DIR+"/mxscript/Stub_scripts/stub_13.mxscr"#define CONTROL_SCRIPT_14 TEST_DIR+"/mxscript/Stub_scripts/stub_14.mxscr"#define CONTROL_SCRIPT_15 TEST_DIR+"/mxscript/Stub_scripts/stub_15.mxscr"#define CONTROL_SCRIPT_16 TEST_DIR+"/mxscript/Stub_scripts/stub_16.mxscr"message("Loading MXP File");setAppFile(MASTER_1,CONTROL_SCRIPT_1 );setAppFile(MASTER_2,CONTROL_SCRIPT_2 );setAppFile(MASTER_3,CONTROL_SCRIPT_3 );setAppFile(MASTER_4,CONTROL_SCRIPT_4 );setAppFile(MASTER_5,CONTROL_SCRIPT_5 );setAppFile(MASTER_6,CONTROL_SCRIPT_6 );setAppFile(MASTER_7,CONTROL_SCRIPT_7 );setAppFile(MASTER_8,CONTROL_SCRIPT_8 );setAppFile(MASTER_9,CONTROL_SCRIPT_9 );setAppFile(MASTER_10 ,CONTROL_SCRIPT_10);setAppFile(MASTER_11 ,CONTROL_SCRIPT_11);setAppFile(MASTER_12 ,CONTROL_SCRIPT_12);setAppFile(MASTER_13 ,CONTROL_SCRIPT_13);setAppFile(MASTER_14 ,CONTROL_SCRIPT_14);setAppFile(MASTER_15 ,CONTROL_SCRIPT_15);setAppFile(MASTER_16 ,CONTROL_SCRIPT_16);openSystem(SYSTEM_FILE,0);setParameter(SLAVE_1, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_1, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_2, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_2, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_3, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_3, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_4, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_4, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_5, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_5, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_6, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_6, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_7, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_7, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_8, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_8, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_9, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_9, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_10, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_10, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_11, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_11, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_12, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_12, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_13, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_13, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_14, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_14, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_15, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_15, "buffer_size", BUFFER_SIZE);setParameter(SLAVE_16, "clock_period", SLAVE_CLOCK);setParameter(SLAVE_16, "buffer_size", BUFFER_SIZE);initSystem();// verify sys clock period was set correctly in MXP fileint sysclkpd = getSysClockPeriod("ps");if(sysclkpd != SYSTEM_CLOCK) {  message("ERROR", "System Clock (Cycle) Period set to %d ps when expecting %d ps in MXP file\n\t%s", sysclkpd, SYSTEM_CLOCK, SYSTEM_FILE);}// initialize SLAVE CAXITG_BUFFER memorystring SlaveInitFile = TEST_DIR+"/mem_init/"+"DDR_target.load";// message("DEBUG", "loading SLAVE_1, %s, CAXITG_BUFFER memory with file %s", SLAVE_1, SlaveInitFile);int mlStatus = CADIMemLoadFromFile(SlaveInitFile, 1, SLAVE_1, "CAXITG_BUFFER", 0x0, 0x100000);if(mlStatus == -1)message("INFO", "Warning: SLAVE_1, %s, CAXITG_BUFFER Memory load from file failed for file: \n\t%s", SLAVE_1, SlaveInitFile);setParameter(SLAVE_1, "cons_write_req_accept_ws", "0");setParameter(SLAVE_1, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_1, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_2, "cons_write_req_accept_ws", "0");setParameter(SLAVE_2, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_2, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_3, "cons_write_req_accept_ws", "0");setParameter(SLAVE_3, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_3, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_4, "cons_write_req_accept_ws", "0");setParameter(SLAVE_4, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_4, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_5, "cons_write_req_accept_ws", "0");setParameter(SLAVE_5, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_5, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_6, "cons_write_req_accept_ws", "0");setParameter(SLAVE_6, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_6, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_7, "cons_write_req_accept_ws", "0");setParameter(SLAVE_7, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_7, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_8, "cons_write_req_accept_ws", "0");setParameter(SLAVE_8, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_8, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_9, "cons_write_req_accept_ws", "0");setParameter(SLAVE_9, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_9, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_10, "cons_write_req_accept_ws", "0");setParameter(SLAVE_10, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_10, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_11, "cons_write_req_accept_ws", "0");setParameter(SLAVE_11, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_11, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_12, "cons_write_req_accept_ws", "0");setParameter(SLAVE_12, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_12, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_13, "cons_write_req_accept_ws", "0");setParameter(SLAVE_13, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_13, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_14, "cons_write_req_accept_ws", "0");setParameter(SLAVE_14, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_14, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_15, "cons_write_req_accept_ws", "0");setParameter(SLAVE_15, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_15, "cons_write_resp_issuing_ws", "0");setParameter(SLAVE_16, "cons_write_req_accept_ws", "0");setParameter(SLAVE_16, "cons_write_data_accept_ws", "(0,0)");setParameter(SLAVE_16, "cons_write_resp_issuing_ws", "0");step(100);step(WARMUP);double tpWriteCycle = 0.0;double tpWriteMbS = 0.0;double writeBytes;writeBytes =  (double)CADIRegRead(SLAVE_1, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_2, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_3, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_4, "C write.Bytes")+ 			  (double)CADIRegRead(SLAVE_5, "C write.Bytes") +			  (double)CADIRegRead(SLAVE_6, "C write.Bytes") +			  (double)CADIRegRead(SLAVE_7, "C write.Bytes") +			  (double)CADIRegRead(SLAVE_8, "C write.Bytes") +			  (double)CADIRegRead(SLAVE_9, "C write.Bytes") +			  (double)CADIRegRead(SLAVE_10, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_11, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_12, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_13, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_14, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_15, "C write.Bytes")+			  (double)CADIRegRead(SLAVE_16, "C write.Bytes");step(RUNTIME); 	  tpWriteCycle = ((double)CADIRegRead(SLAVE_1, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_2, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_3, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_4, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_5, "C write.Bytes") +					  (double)CADIRegRead(SLAVE_6, "C write.Bytes") +					  (double)CADIRegRead(SLAVE_7, "C write.Bytes") +					  (double)CADIRegRead(SLAVE_8, "C write.Bytes") +					  (double)CADIRegRead(SLAVE_9, "C write.Bytes") +					  (double)CADIRegRead(SLAVE_10, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_11, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_12, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_13, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_14, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_15, "C write.Bytes")+					  (double)CADIRegRead(SLAVE_16, "C write.Bytes")				  					  - writeBytes ) / (double)(RUNTIME*16);		    tpWriteMbS    = tpWriteCycle / ((double)SYSTEM_CLOCK / 1000.0);  message("INFO", "COMMAND_INTERVAL:%d TRAFFIC_PATTERN:%d",COMMAND_INTERVAL,TRAFFIC_PATTERN);  message("INFO", "WARMUP:%d RUNTIME:%d",WARMUP,RUNTIME);  message("INFO", "LOG_TP  tpWriteCycle tpWriteMbS");  message("INFO", "LOG_TP  bytes/cycle  MBytes/s");  message("INFO", "LOG_TP   %6.3f       %6.3f", tpWriteCycle, tpWriteMbS);   closeSystem();